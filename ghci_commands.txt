install haskell on debian
=========================
apt-get install ghc ghc-prof cabal-install


webframework Yesod
==================
cabal update && cabal install -p yesod-platform

if you want profiling install all packages with the -p option

where to find help
==================
hayoo!          haskell api search
hoogle          haskell api search

haskell-cafe mailing list


best practice
=============
Define some functions in a script, e.g. myfunctions.hs,
then load these functions into ghci by typing :l myfunctions.
If you change the .hs script, run :l myfunctions again or run :r,
which reloads the current scipt.
Or you can just type into your terminal: ghci myfunction.hs.
Or you compile your script/programm with
ghci --make -o test.bin test.hs 


Now, let the games begin
========================
$ ghci


change prompt
=============
prelude> :set prompt "ghci> "
or
touch .ghci && echo ':set prompt "ghci> "' >> .ghci


load module Data.Ratio which let us work with rational numbers into ghci
========================================================================
prelude> :module + Data.Ratio

prompt will change to
Prelude Data.Ratio >


ghci> 2 + (-3)
-1

ghci> 3 + (-(13 * 37))
-478

ghci> (+) 2 2
4

ghci> 2*3
6

ghci> 2*-3
error

ghci> 2*(-3)
-6

ghci> True && False
False

ghci> Fale || True
True

ghci> True && 1
error

ghci> 1 == 1
True


/= means "is not equal which is in c != "
ghci> 1 /= 3
True

ghci> not True
False

ghci> 1 + 4 * 2
9


calling functions
=================

infix
=====
ghci> 9 `min` 10
9

prefix
======
ghci> min 9 10
9

Funcition application has the highest prcedence of all operations.

ghci> succ 9 + max 5 4 + 1
16

ghci> (succ 9) + (max 5 4) + 1
16

ghci> succ 9 * 10
100

ghci> succ (succ 9)
11

ghci> succ $ succ 9
11

The dollar sign saves us parantheses.

ghci> min (min 9 10) (min 3 2)
2


First Function
==============
ghci> let myDoubleFunction x = x + x
ghci> myDoubleFunction 5
10

ghci> :t myDoubleFunction
myDoubleFunction :: Num a => a -> a

myDoubleFunction is a function that takes an a and return an a, 
in which a is type Num.

Remember:
f ist eine Funktion die nen integer nimmt, und eine Funktion zurück gibt
die nen integer nimmt und einen intege zurück gibt. 
f :: integer -> integer  -> integer
=
f :: integer -> (integer -> interger)  rechtsassoziativ


ghci>let doubleUs x y = myDoubleFunction x + myDoubleFunction y
ghci> doubleUs 4 5
18

ghci>let doubleSmallNumbers x = if x > 100
                                   then x
                                   else x*2

The else part is mandatory.
In Haskell the if is an expression that must return a value,
and not a statement.
Expression: is something that returns a value e.g. 1 + 2 * foo.bar()
            and an Expression has a type such as Bool or String
Statement: returns no value e.g x = x + 5 or goto 100


Operator Precedence and Associativity
=====================================

Precedence
from 1 to 9 (1 lowest 9 highest)

Associativity
left  associative: infixl
right associativ:  infxlr

ghci> :info (^)

ghci> :info (+)

Am Typ der Funktion gepaart mit dem Namen der Funktion,
   kann man meist schon erkennen, was die Funktion tut.

ghci> :t map
map :: (a -> b) -> [a] -> [b]
map ist eine Funtkion die ein a und ein b nimmt (a -> b), ein Liste von a's [a]
und eine Liste von b's [b] zurück gibt
ghci> let f n = n * 2
ghci> let lst = [1,2,3]
ghci> map f lst 
[2,4,6]

sort ist in Modul Data.List
ghci> :m Data.List
ghci> :t sort
sort :: Ord a => [a] -> [a]
sort ist eine Funktion die eine Liste von a's [a] nimmt und eine Liste von a's [a] liefert
a muss eine Ordnung haben

ghci> let lst = [1,3,5,8,2,4,7,6,9,0]
ghci> sort lst
[0,1,2,3,4,5,6,7,8,9,0]


Concatenation
=============

[1,2,3] ++ [4,5,6]
[1,2,3,4,5,6]

Adding something at the beginning use the cons operator :
5:[1,2,3]
[5,1,2,3]


Accesing a list
===============
"Hello World" !! 2
'l'

[1,2,3,4,5,6] !! 1
2


List inside Lists
=================
let ll = [[1,2],[1,2,3],[5,6,7]] 
ll ++ [[1,1,1]]
[[1,2],[1,2,3],[5,6,7],[1,1,1]] 

List within list can be of different lengths, but they can't 
be on different types.


head
====
head [1,2,3]
1

tail
====
tail [1,2,3]
[2,3]

last
====
last [1,2,3]
3

init
====
init [1,2,3]
[1,2]



 head       tail
 _______________________
|    |                 |
  x   x x x x x x   x
|________________|_____|
      init        last


length
======
length [1,2,3]
3

null
====
null [1,2,3]
False

null []
True

reverse
=======
reverse [1,2,3]
[3,2,1]

take
====
take 2 [1,2,3]
[1,2]
take 1 [1,2,3]
1

drop
====
drop 2 [1,2,3]
[3]

maximum
=======
maximum [1,2,3]
3

minimium
========
minimium [1,2,3]
1

sum
===
sum [1,2,3]
6

product
=======
product [2,2,3]
12
product [1,2,3,4,0]
0

elem
====
infix
2 `elem` [1,2,3]
True
prefix
elem 2 [1,2,3]
True
elem 10 [1,2,3]
False

Ranges
======
[1..10]
[1,2,3,4,5,6,7,8,9,10]

['a'..'z']
['a','b','c' ...... 'z']

['a'..'z']++['A'..'Z']

[20,19..0]
[20,19,18,17,16,15 ..... 0]

endless list
[0,1..]

take 100 [1..]

take 100 [13,26..24*13]

take 10 (cycle [1,2,3])
[1,2,3,1,2,3,1,2,3,1]

take 2 (cycle "COOL")
["COOL","COOL"]

take 4 (repeat 5)
[5,5,5,5]

shorter
replicate 3 10
[10,10,10]

List Comprehension I like it in every language
==================

[x*2 | x <- [1..10]]
[2,4,6,8,10,12,14,16,18,20]

 out   bind          predicate
[x*2 | x <- [1..10], x*2 >= 12]
[12,14,16,18,20]

/= means dissimilar

[x | x <- [10..20], x /= 13, x/= 15, x /= 19]
[10,11,12,14,16,17,18,20]

let myBoom xs = [if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]
myBoom [1..15]
["BOOM!","BOOM!","BOOM!","BOOM!","BOOM!","BANG!","BANG!","BANG!"]


This is cool
[x+y | x <- [1,2,3], y <- [10,100,1000]]
[11,101,1001,12,102,1002,13,103,1003]

[x*y | x <- [2,5,10], y <- [8,10,11], x*y > 50]
[55,80,100,110]

removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]
removeNonUppercase "Hahaha! Ahaha"
"HA"




let nouns = ["house", "boat", "flower"]
let adjectives = ["flying", "lazy"]
[adjective ++ " " noun | adjective <- adjectives, noun <- nouns]


This function will replace every element in a list with 1,
then add them all up with sum, yielding the length of the list.

The underscore (_) is used as a temporary variable to store the items.
We don't care about the values.

let myLength xs = sum[1 | _ <- xs]
myLength [1..10]
10

rightside associative
let xxs = [[1,3,5,7],[1,2,3,4],[7,8,9,10]]
[ [x | x <- xs, even x] | xs <- xxs]
[[],[2,4],[8,10]]

let lA = [1,2,3]
let lB = [2,3,4]
[x * y | x <- lA, y <- lB]
[2,3,4,4,6,8,6,9,12]

let fun xs ys = [x * y | x <- xs, y <- ys]


Tuples
======
Tuples are hetrogeneous and they have a fixed size.

ghci>(1,3)
(1,3)

ghci>(2, 'a', "hello")
(2,'a',"hello")

ghci>let t = [(1,2),(3,4)]
ghci> t
[(1,2),(3,4)]

ghci>t ++ [(1,2,3)]
this is an error
but

ghci> t ++ [(4,4)]

ghci>fst (8,9)
8

ghci>snd (8,9)
9

ZIP sp cool
===========

ghci>zip [1..5] $ take 5 $ repeat 5
or
ghci>zip [1..5] (take 5 (reapeat 5))
[(1,5),(2,5),(3,5),(4,5),(5,5)]

ghci> zip [1..5] ["one","two","three","four","five"]
[(1,"one"),(2,"two"),(3,"three"),(4,"four"),(5,"five")]

















































wSo cool ZI
